/* === Konfiguracja === */
const API_URL = "http://127.0.0.1:8000/chat";
const HASLO = "TwojeSuperHaslo";
let chatHistory = [];

/* Stan UI */
const state = {
  audio:false, observe:false, system:false,
  dock:"left",
  activeCard:"whatsapp",
  cards:{}
};

function saveCardsToStorage(){
  localStorage.setItem("ai_cards_state", JSON.stringify({activeCard:state.activeCard,cards:state.cards}));
}
function loadCardsFromStorage(){
  try{
    const s = JSON.parse(localStorage.getItem("ai_cards_state") || "{}");
    if(s.cards) state.cards = s.cards;
    if(s.activeCard) state.activeCard = s.activeCard;
  }catch{}
}

document.addEventListener("DOMContentLoaded", () => {
  const chatToggle = document.getElementById("chat_toggle");
  const chatPanel  = document.getElementById("chat_panel");
  const chatClose  = document.getElementById("chat_close");
  const chatResizer= document.getElementById("chat_resizer");
  const sendBtn    = document.getElementById("chat_send");
  const input      = document.getElementById("chat_input");

  const btnAudio   = document.getElementById("chat_audio");
  const btnObs     = document.getElementById("chat_observe_toggle");
  const btnSys     = document.getElementById("chat_system_toggle");
  const badgeAudio = document.getElementById("badge_audio");
  const badgeObs   = document.getElementById("badge_observe");
  const badgeSys   = document.getElementById("badge_system");

  const hintL = document.getElementById("dock_hint_left");
  const hintR = document.getElementById("dock_hint_right");
  const hintT = document.getElementById("dock_hint_top");
  const hintB = document.getElementById("dock_hint_bottom");

  const tabsScroll = document.getElementById("tabs_scroll");
  const tabAdd     = document.getElementById("tab_add");

  const cardModal  = document.getElementById("card_modal");
  const cardTitle  = document.getElementById("card_modal_title");
  const fieldAuto  = document.getElementById("card_autoReply");
  const fieldKeys  = document.getElementById("card_keywords");
  const fieldNotes = document.getElementById("card_notes");
  const cardSave   = document.getElementById("card_save");
  const cardClose  = document.getElementById("card_close");

  // --- Karty: wczytaj z pliku + localStorage ---
  fetch("cards-config.json").then(r=>r.json()).then(cfg=>{
    loadCardsFromStorage();
    cfg.cards.forEach(c=>{ if(!state.cards[c.id]) state.cards[c.id]=c; });
    renderTabs(); activateTab(state.activeCard || cfg.cards[0].id);
  }).catch(()=>{
    loadCardsFromStorage();
    if(Object.keys(state.cards).length===0){
      state.cards = {
        whatsapp:{id:"whatsapp",name:"WhatsApp",icon:"🟢",rules:{autoReply:false,keywords:[],notes:""}},
        outlook:{id:"outlook",name:"Outlook",icon:"📧",rules:{autoReply:false,keywords:[],notes:""}},
        messenger:{id:"messenger",name:"Messenger",icon:"💬",rules:{autoReply:false,keywords:[],notes:""}}
      };
    }
    renderTabs(); activateTab(state.activeCard || "whatsapp");
  });

  function renderTabs(){
    tabsScroll.innerHTML = "";
    Object.values(state.cards).forEach(c=>{
      const b = document.createElement("button");
      b.className = "tab_btn" + (c.id===state.activeCard?" active":"");
      b.dataset.card = c.id;
      b.textContent = `${c.icon} ${c.name}`;
      b.onclick = ()=>activateTab(c.id);
      b.oncontextmenu = (e)=>{ e.preventDefault(); openCardModal(c.id); };
      tabsScroll.appendChild(b);
    });
  }
  function activateTab(cardId){
    state.activeCard = cardId; saveCardsToStorage();
    document.querySelectorAll(".tab_btn").forEach(btn=>btn.classList.toggle("active", btn.dataset.card===cardId));
  }
  function openCardModal(cardId){
    const c = state.cards[cardId]; if(!c) return;
    cardTitle.textContent = c.name;
    fieldAuto.checked = !!c.rules?.autoReply;
    fieldKeys.value = (c.rules?.keywords||[]).join(", ");
    fieldNotes.value = c.rules?.notes || "";
    cardModal.classList.remove("hidden");
    cardSave.onclick = ()=>{
      c.rules = c.rules || {};
      c.rules.autoReply = fieldAuto.checked;
      c.rules.keywords = fieldKeys.value.split(",").map(s=>s.trim()).filter(Boolean);
      c.rules.notes = fieldNotes.value.trim();
      state.cards[cardId] = c; saveCardsToStorage();
      cardModal.classList.add("hidden");
    };
    cardClose.onclick = ()=>cardModal.classList.add("hidden");
  }
  if(tabAdd){
    tabAdd.onclick = ()=>{
      const id = "card_" + Math.random().toString(36).slice(2,7);
      state.cards[id] = {id,name:"Nowa karta",icon:"🧩",rules:{autoReply:false,keywords:[],notes:""}};
      saveCardsToStorage(); renderTabs(); activateTab(id); openCardModal(id);
    };
  }

  // ------ Docking i chmurka (hold 1s + podgląd) ------
  function applyDock(dock, keepOpen=false){
    state.dock = dock;
    chatPanel.className = ""; // reset
    chatPanel.classList.add(`dock-${dock}`);
    // klasy kierunkowe dla hover
    chatToggle.classList.remove("bubble-right","bubble-top","bubble-bottom");
    if(dock==="right") chatToggle.classList.add("bubble-right");
    if(dock==="top") chatToggle.classList.add("bubble-top");
    if(dock==="bottom") chatToggle.classList.add("bubble-bottom");
    if(keepOpen && !chatPanel.classList.contains("open")) chatPanel.classList.add("open");
  }
  function nearestDock(){
    const r = chatToggle.getBoundingClientRect();
    const dist = {left:r.left, right:window.innerWidth-r.right, top:r.top, bottom:window.innerHeight-r.bottom};
    return Object.entries(dist).sort((a,b)=>a[1]-b[1])[0][0];
  }
  function showDockHint(where){
    document.getElementById("dock_hint_left").classList.toggle("show",where==="left");
    document.getElementById("dock_hint_right").classList.toggle("show",where==="right");
    document.getElementById("dock_hint_top").classList.toggle("show",where==="top");
    document.getElementById("dock_hint_bottom").classList.toggle("show",where==="bottom");
  }
  function hideDockHints(){
    ["dock_hint_left","dock_hint_right","dock_hint_top","dock_hint_bottom"].forEach(id=>document.getElementById(id).classList.remove("show"));
  }

  function openPanel(){ chatPanel.classList.add("open"); }
  function closePanel(){ chatPanel.classList.remove("open"); }

  chatToggle.addEventListener("click", ()=>{
    if(chatPanel.classList.contains("open")) closePanel();
    else openPanel();
  });
  if(chatClose) chatClose.addEventListener("click", closePanel);

  let holdTimer=null, draggingBubble=false, offsetX=0, offsetY=0;
  chatToggle.addEventListener("mousedown",(e)=>{
    holdTimer = setTimeout(()=>{
      draggingBubble = true;
      offsetX = e.clientX - chatToggle.offsetLeft;
      offsetY = e.clientY - chatToggle.offsetTop;
      document.onmousemove = (ev)=>{
        if(!draggingBubble) return;
        chatToggle.style.left = (ev.clientX - offsetX) + "px";
        chatToggle.style.top  = (ev.clientY - offsetY) + "px";
        const guess = nearestDock();
        showDockHint(guess);
        applyDock(guess, chatPanel.classList.contains("open")); // natychmiastowa zmiana kierunku
      };
      document.onmouseup = ()=>{
        draggingBubble=false; document.onmousemove=null; document.onmouseup=null; hideDockHints();
        const dock = nearestDock();
        applyDock(dock, chatPanel.classList.contains("open"));
        // ogranicz pozycję chmurki i dociśnij do ściany na pół-schowanie
        const maxLeft = window.innerWidth - chatToggle.offsetWidth;
        const maxTop  = window.innerHeight - chatToggle.offsetHeight;
        chatToggle.style.left = Math.min(Math.max(chatToggle.offsetLeft, -20), maxLeft) + "px";
        chatToggle.style.top  = Math.min(Math.max(chatToggle.offsetTop, 44), maxTop) + "px";
      };
    }, 1000); // 1 sekunda
  });
  chatToggle.addEventListener("mouseup", ()=>clearTimeout(holdTimer));
  applyDock("left", false);

  // ------ Resizer ------
  let resizing=false;
  if(chatResizer){
    chatResizer.addEventListener("mousedown",(e)=>{resizing=true;document.body.style.userSelect="none";e.preventDefault();});
    window.addEventListener("mousemove",(e)=>{
      if(!resizing) return;
      const d = state.dock;
      if(d==="left")  chatPanel.style.width  = Math.min(Math.max(e.clientX, 280), 1000) + "px";
      if(d==="right") chatPanel.style.width  = Math.min(Math.max(window.innerWidth - e.clientX, 280), 1000) + "px";
      if(d==="top")   chatPanel.style.height = Math.min(Math.max(e.clientY-44, 220), window.innerHeight-80) + "px";
      if(d==="bottom")chatPanel.style.height = Math.min(Math.max(window.innerHeight - e.clientY, 220), window.innerHeight-80) + "px";
    });
    window.addEventListener("mouseup",()=>{ if(resizing){resizing=false;document.body.style.userSelect="";} });
  }

  // ------ Toolbar badge ------
  function setBadge(badge,on,textOn,textOff,btn){
    if(!badge) return;
    if(on){badge.classList.remove("off");badge.classList.add("on");badge.textContent=textOn;btn&&btn.classList.add("active");}
    else  {badge.classList.remove("on");badge.classList.add("off");badge.textContent=textOff;btn&&btn.classList.remove("active");}
  }
  if(btnAudio&&badgeAudio) btnAudio.addEventListener("click",()=>{state.audio=!state.audio;setBadge(badgeAudio,state.audio,"Audio: włączone","Audio: wyłączone",btnAudio);});
  if(btnObs&&badgeObs)     btnObs.addEventListener("click",()=>{state.observe=!state.observe;setBadge(badgeObs,state.observe,"Obserwacja: włączona","Obserwacja: wyłączona",btnObs);});
  if(btnSys&&badgeSys)     btnSys.addEventListener("click",()=>{state.system=!state.system;setBadge(badgeSys,state.system,"System: odblokowany","System: zablokowany",btnSys);});

  // Panel problemów toggle
  const statusToggle = document.getElementById("status_toggle");
  if(statusToggle){
    statusToggle.addEventListener("click",()=>{
      const p = document.getElementById("status_content");
      p.classList.toggle("hidden");
    });
  }

  // Wysyłanie wiadomości
  if(sendBtn) sendBtn.onclick = sendChatMessage;
  if(input){
    input.addEventListener("keydown",(e)=>{ if(e.key==="Enter" && !e.shiftKey){ e.preventDefault(); sendChatMessage(); }});
  }
});

/* Render czatu */
function renderChat(){
  const box = document.getElementById("chat_messages");
  if(!box) return;
  box.innerHTML = "";
  chatHistory.forEach(msg=>{
    const div = document.createElement("div");
    div.className = "chat_msg " + (msg.autor==="Ty"?"chat_me":"chat_ai");
    div.textContent = msg.tekst;
    box.appendChild(div);
  });
  box.scrollTop = box.scrollHeight;
}

/* Wysyłka do AI */
function sendChatMessage(){
  const input = document.getElementById("chat_input");
  if(!input) return;
  const text = input.value.trim(); if(!text) return;
  chatHistory.push({autor:"Ty",tekst:text}); renderChat(); input.value = "";

  fetch(API_URL,{
    method:"POST",
    headers:{"Content-Type":"application/json"},
    body:JSON.stringify({wiadomosc:text,historia:chatHistory,haslo:HASLO})
  })
  .then(res=>res.json())
  .then(data=>{
    const odpowiedz = data?.odpowiedz || "🤖 Brak odpowiedzi.";
    chatHistory.push({autor:"AI",tekst:odpowiedz});
    renderChat();
  })
  .catch(err=>{
    console.error("Błąd połączenia z AI:", err);
    chatHistory.push({autor:"AI",tekst:"❌ Błąd połączenia."});
    renderChat();
  });
}

/* Zapis rozmowy */
function zapiszRozmoweDoPliku(){
  const teraz = new Date();
  const timestamp = teraz.toISOString().replace(/[:.]/g,"-");
  const linie = chatHistory.map(msg=>`${msg.autor}: ${msg.tekst}`).join("\n");
  const blob = new Blob([linie],{type:"text/markdown"});
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = `${timestamp}_chat.md`;
  link.click();
}

/* Panel problemów – API minimalne */
function dodajProblem(tekst, poziom="średni"){
  const lista = document.getElementById("status_list");
  if(!lista) return;
  const li = document.createElement("li");
  li.textContent = tekst;
  li.className = poziom==="duży"?"big":(poziom==="mały"?"small":"mid");
  lista.appendChild(li);
}
/* === Weryfikacja źródeł === */
async function sprawdzZrodlo(url) {
  try {
    const resChar = await fetch("http://127.0.0.1:5500/../PROJEKT/AI_trening/charakter.json");
    const char = await resChar.json();

    const host = (new URL(url)).host.replace(/^www\./,'').toLowerCase();
    if (char.zrodla_zablokowane && char.zrodla_zablokowane.some(z=>host.endsWith(z))) return {status:"zablokowane", host};
    if (char.zrodla_zaufane && char.zrodla_zaufane.some(z=>host.endsWith(z))) return {status:"aktywne", host};
    if (char.zrodla_niepewne && char.zrodla_niepewne.some(z=>host.endsWith(z))) return {status:"niepewne", host};
    return {status:"nieznane", host};
  } catch(e) {
    console.warn("sprawdzZrodlo błąd:", e);
    return {status:"nieznane", host:null};
  }
}
/* === Analiza rozmowy (tematy, pytania, notatki) === */
async function analizujRozmowe() {
  try {
    const box = document.getElementById("chat_messages");
    if (!box) return;
    const msgs = Array.from(box.querySelectorAll(".chat_msg")).map(n=>n.textContent||"");

    const topics = [];
    const questions = [];
    msgs.forEach(m=>{
      if (m.includes("?")) questions.push(m);
      const words = m.toLowerCase().split(/\W+/).filter(Boolean);
      words.slice(0,3).forEach(w=>{ if (!topics.includes(w) && w.length>3) topics.push(w); });
    });

    const note = {
      ts: new Date().toISOString(),
      topics: topics.slice(0,10),
      questions: questions.slice(-5)
    };

    // zapis notatek lokalnie (fallback: pobranie przez przeglądarkę)
    console.log("Notatka analizy:", note);
    dodajProblem("Zaktualizowano notatki rozmowy (lokalnie).", "mały");
  } catch(e) {
    console.warn("analizujRozmowe błąd:", e);
  }
}
/* === Tryb poznawczy (uczy się stylu ludzi, nie faktów) === */
function ustawTrybPoznawczy(on) {
  if (!window.state) window.state = {};
  window.state.tryb_poznawczy = !!on;
  dodajProblem("Tryb poznawczy: " + (on ? "włączony" : "wyłączony"), on ? "mały" : "średni");
}

/* Dodaj przycisk do toolbara (jeśli brak) */
document.addEventListener("DOMContentLoaded", () => {
  const tb = document.getElementById("chat_toolbar");
  if (!tb) return;
  if (!document.getElementById("chat_cognitive_toggle")) {
    const btn = document.createElement("button");
    btn.id = "chat_cognitive_toggle";
    btn.className = "toolbar_btn";
    btn.title = "Tryb poznawczy (uczenie stylu)";
    btn.textContent = "🧠";
    btn.addEventListener("click", () => {
      const on = !(window.state && window.state.tryb_poznawczy);
      ustawTrybPoznawczy(on);
      btn.classList.toggle("active", on);
    });
    tb.appendChild(btn);
  }
});
/* AUTO_ANALIZA_HOOK */
(function(){
  const _origSend = window.sendChatMessage;
  if (typeof _origSend === "function" && !_origSend._patched) {
    window.sendChatMessage = function(){
      const p = _origSend.apply(this, arguments);
      Promise.resolve(p).finally(() => {
        try { analizujRozmowe(); } catch(e){}
      });
      window.sendChatMessage._patched = true;
      return p;
    }
  } else {
    // fallback: cykliczna analiza, jeśli nie udało się podmienić
    setInterval(() => { try { analizujRozmowe(); } catch(e){} }, 15000);
  }
})();
/* === Link utils + auto-flagowanie === */
function extractUrls(text){
  if(!text) return [];
  const regex = /(https?:\/\/[^\s]+)/g;
  return text.match(regex) || [];
}
async function autoFlagLinks(text){
  const urls = extractUrls(text);
  for (const u of urls) {
    try {
      const info = await sprawdzZrodlo(u);
      if (info?.status && info.status !== "aktywne") {
        dodajProblem(`Link ${u} oznaczony jako: ${info.status}`, info.status==="zablokowane" ? "duży" : "średni");
      }
    } catch {}
  }
}
/* === YouTube UI === */
function initYouTubeUI(){
  const btn = document.getElementById("chat_youtube");
  const modal = document.getElementById("youtube_modal");
  const close = document.getElementById("yt_close");
  const analyze = document.getElementById("yt_analyze");
  const inUrl = document.getElementById("yt_url");
  const inKey = document.getElementById("yt_api_key");

  if (!btn || !modal) return;

  btn.addEventListener("click", ()=>modal.classList.remove("hidden"));
  close.addEventListener("click", ()=>modal.classList.add("hidden"));
  analyze.addEventListener("click", async ()=>{
    try {
      const url = (inUrl.value||"").trim();
      const key = (inKey.value||"").trim();
      if (key && window.youtubeConnector) window.youtubeConnector.setApiKey(key);
      if (!url) { dodajProblem("Podaj URL do analizy (YouTube).", "mały"); return; }
      if (window.youtubeConnector) {
        const res = await window.youtubeConnector.analyzePublic(url);
        chatHistory.push({autor:"AI", tekst:`YouTube analiza: ${res.summary} ${res.flags.length?("(flagi: "+res.flags.join(", ")+")"):""}`});
        renderChat();
      } else {
        dodajProblem("Brak konektora YouTube.", "duży");
      }
    } catch(e){
      dodajProblem("Błąd analizy YouTube.", "duży");
    } finally {
      modal.classList.add("hidden");
    }
  });
}
document.addEventListener("DOMContentLoaded", initYouTubeUI);
/* === Komenda czatu: /analiza <url> (YouTube/publiczne linki) === */
(function(){
  const origSend = window.sendChatMessage;
  if (typeof origSend === "function" && !origSend._ytPatched) {
    window.sendChatMessage = async function(){
      const input = document.getElementById("chat_input");
      const text = (input?.value || "").trim();

      // auto-flagowanie linków w Twojej wiadomości
      try { await autoFlagLinks(text); } catch {}

      // komenda /analiza URL
      if (text.startsWith("/analiza ")) {
        const url = text.replace("/analiza","").trim();
        if (window.youtubeConnector) {
          const res = await window.youtubeConnector.analyzePublic(url);
          chatHistory.push({autor:"AI", tekst:`Analiza publiczna: ${res.summary} ${res.flags.length?("(flagi: "+res.flags.join(", ")+")"):""}`});
          renderChat();
        } else {
          dodajProblem("Brak konektora YouTube.", "duży");
        }
        input.value = "";
        return;
      }

      // normalny przepływ
      const p = origSend.apply(this, arguments);
      return p;
    };
    window.sendChatMessage._ytPatched = true;
  }
})();
